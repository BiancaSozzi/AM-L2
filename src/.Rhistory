p1 <- 1-p
ggplot(data=trainset)+
geom_bar(aes(x=1, y = length(nspam))+
geom_bar(aes(x=2, fill=p1))+
geom_bar(aes(x=3, fill=length(m.train$matrix$category)))
geom_bar(aes(x=1, )+
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(aes(x=1, length(nspam) )+
geom_bar(aes(x=2, fill=p1))+
geom_bar(aes(x=3, fill=length(m.train$matrix$category)))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(aes(x=1, size= length(nspam))+
geom_bar(aes(x=2, fill=p1))+
geom_bar(aes(x=3, fill=length(m.train$matrix$category)))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(aes(x=1, size= 3)+
geom_bar(aes(x=2, fill=p1))+
geom_bar(aes(x=3, fill=length(m.train$matrix$category)))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(aes(x=1, size= 3)+
geom_bar(aes(x=2, fill=p1))+
geom_bar(aes(x=3, fill=length(m.train$matrix$category))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(aes(x=1, size= 3))+
geom_bar(aes(x=2, fill=p1))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(aes(x=1, size= 3))+
geom_bar(aes(x=2, fill=10))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(data=m.train)+
geom_bar(aes(x=2, fill=10))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(data=2)+
geom_bar(aes(x=2, fill=10))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_col()+
geom_bar(aes(x=2, fill=10))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_col(aes(x=2, fill=10))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#   geom_bar(aes(x=2, fill=10))
ggplot(data=dat, aes(x=time, y=total_bill))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#   geom_bar(aes(x=2, fill=10))
ggplot(data=trainset, aes(x=time, y=total_bill))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#   geom_bar(aes(x=2, fill=10))
ggplot(data=trainset, aes(x="hola", y="hola"))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(maping= NULL)
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(maping= NULL, data= "hola")
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(maping= NULL, data= nspam)
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(maping= NULL, data= length(nspam))
ggplot(data=trainset)+
geom_bar(aes(x = 1, fill=white))
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
ggplot(data=trainset)+
geom_bar(aes(x = 1, fill=black))
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
ggplot(mpg, aes("hola", hwy, colour = class)) +
geom_point()
library(ggplot2)
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#    geom_bar(aes(x = 1, fill=black))
ggplot(mpg, aes(m.train$matrix$category, hwy, colour = class)) +
geom_point()
library(ggplot2)
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#    geom_bar(aes(x = 1, fill=black))
ggplot(mpg, aes(m.train$matrix, hwy, colour = class)) +
geom_point()
library(ggplot2)
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#    geom_bar(aes(x = 1, fill=black))
ggplot(mpg, aes(m.train, hwy, colour = class)) +
geom_point()
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
ggplot(mpg, aes(displ, hwy, colour = m.train$matrix$category)) +
geom_point()
library(ggplot2)
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#    geom_bar(aes(x = 1, fill=black))
ggplot(mpg, aes(displ, hwy, colour = m.train$matrix)) +
geom_point()
ggplot(mpg, aes(displ, hwy, colour = m.train)) +
geom_point()
library(ggplot2)
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#    geom_bar(aes(x = 1, fill=black))
ggplot(mpg, aes(displ, hwy)) +
geom_point()
library(ggplot2)
nspam <- which(m.train$matrix$category == "SPAM")
print(length(nspam))
p <- length(nspam)/length(m.train$matrix$category)
p1 <- 1-p
# ggplot(data=trainset)+
#    geom_bar(aes(x = 1, fill=black))
ggplot(nspam, aes(displ, hwy)) +
geom_point()
ggplot(nspam, aes(displ, hwy)) +
geom_point()
ggplot(length(nspam), aes(displ, hwy)) +
geom_point()
ggplot(data=trainset)+
geom_bar(aes(x = 1, fill=black))
ggplot(data=trainset)+
geom_bar(aes(x = 1, fill=black))
ggplot(data=trainset)+
geom_bar(aes(x = 1, size=17))
# ggplot(data=trainset)+
#     geom_bar(aes(x = 1, size=17))
ggplot(cars,aes(x=speed,y=dist))
# ggplot(data=trainset)+
#     geom_bar(aes(x = 1, size=17))
ggplot(trainset,aes(x=speed,y=dist))
cars
# ggplot(data=trainset)+
#     geom_bar(aes(x = 1, size=17))
ggplot(cars,aes(x=speed,y=dist))+
ggplot(cars,aes(x=speed,y=dist))
# ggplot(data=trainset)+
#     geom_bar(aes(x = 1, size=17))
ggplot(data=cars,aes(x=speed,y=dist))+
geom_point()
typeof(cars)
cars
# ggplot(data=trainset)+
#     geom_bar(aes(x = 1, size=17))
ggplot(data=trainset,aes(x=speed,y=dist))+
geom_bar( aes(fill = fl))
# ggplot(data=trainset)+
#     geom_bar(aes(x = 1, size=17))
ggplot(data=trainset)+
geom_bar( aes(fill = fl))
ggplot(data=trainset)+
geom_bar(aes(x = 1, fill=fl))
ggplot(data=trainset)+
scale_fill_brewer( palette = "Blues")
install.packages("rpart")
install.packages("rpart.plot")
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
prp(tree.model)
colCategory <- ncol(trainset)
m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
# The attribute Humidity
n1 <- new.node("Humidity", c("High", "Normal"))
source("tree.R")
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
# prp(tree.model)
colCategory <- ncol(trainset)
m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
# prp(tree.model)
colCategory <- ncol(trainset)
m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
prp(tree.model) ##realiza el gráfico del tree.model
colCategory <- ncol(trainset)
m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
# prp(tree.model) ##realiza el gráfico del tree.model
colCategory <- ncol(trainset)
m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
print(ncol(trainset))
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
prp(tree.model) ##realiza el gráfico del tree.model
colCategory <- ncol(trainset)
# m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
print(aux.pred)
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
prp(tree.model) ##realiza el gráfico del tree.model
colCategory <- ncol(trainset)
# m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
print(aux.pred)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="httpaddr"|tokens=="news"]
trainset.cut <- trainset[-index.cut]
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
prp(tree.model.cut)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="httpaddr"|tokens=="news"]
trainset.cut <- trainset[-index.cut]
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
# prp(tree.model.cut)
print(index.cut)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="httpaddr"|tokens=="news"] #devuelve los index de las palabras buscadas
trainset.cut <- trainset[-index.cut]
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
# prp(tree.model.cut)
print(trainset.cut)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="httpaddr"|tokens=="news"] #devuelve los index de las palabras buscadas
trainset.cut <- trainset[-index.cut] ##deja el trainset sin las palabras buscadas en la linea anterior
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
prp(tree.model.cut)
# print(trainset.cut)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="httpaddr"|tokens=="news"] #devuelve los index de las palabras buscadas
trainset.cut <- trainset[-index.cut] ##deja el trainset sin las palabras buscadas en la linea anterior
tree.model.cut <- rpart(formula=category~.,data=trainset)
prp(tree.model.cut)
# print(trainset.cut)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="httpaddr"|tokens=="news"] #devuelve los index de las palabras buscadas
trainset.cut <- trainset[-index.cut] ##deja el trainset sin las palabras buscadas en la linea anterior
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
prp(tree.model.cut)
# print(trainset.cut)
index.cut <- (1:length(tokens))[tokens=="httpaddr"|tokens=="news"] #devuelve los index de las palabras buscadas
trainset.cut <- trainset[-index.cut] ##deja el trainset sin las palabras buscadas en la linea anterior
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
prp(tree.model.cut)
# print(trainset.cut)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="httpaddr"|tokens=="news"] #devuelve los index de las palabras buscadas
trainset.cut <- trainset[-index.cut] ##deja el trainset sin las palabras buscadas en la linea anterior
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
prp(tree.model.cut)
# print(trainset.cut)
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
prp(tree.model)
colCategory <- ncol(trainset)
m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
print(result)
# instalar las librerias rpart,rpart.plot
library("rpart")
library("rpart.plot")
tree.model <- rpart(formula=category~.,data=trainset)
# prp(tree.model)
colCategory <- ncol(trainset)
m.pred <- predict(tree.model, trainset[-colCategory])
aux.pred <- as.matrix(m.pred[,1])
aux.pred[aux.pred>=0.5] <- "SPAM"
aux.pred[aux.pred<0.5] <- "NO-SPAM"
aux.true <- trainset[colCategory]
result <- cbind(aux.true,aux.pred,aux.true==aux.pred)
names(result) <- c("TRUE-VALUE", "PREDICTION", "CORRECT?")
print(result)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="emailadd"|tokens=="news"] #devuelve los index de las palabras buscadas
trainset.cut <- trainset[-index.cut] ##deja el trainset sin las palabras buscadas en la linea anterior
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
prp(tree.model.cut)
# print(trainset.cut)
index.cut <- (1:length(tokens))[tokens=="spam"|tokens=="httpaddr"|tokens=="news"] #devuelve los index de las palabras buscadas
trainset.cut <- trainset[-index.cut] ##deja el trainset sin las palabras buscadas en la linea anterior
tree.model.cut <- rpart(formula=category~.,data=trainset.cut)
prp(tree.model.cut)
# print(trainset.cut)
setwd("D:/Facultad/Aprendizaje de Maquinas/AM-L2/src")
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
setwd("D:/Facultad/Aprendizaje de Maquinas/AM-L2/src")
run.kfold.experiment()
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
best.model <- NULL
summary <- data.frame()
all.indexes <- sample(nrow(data), nrow(data), replace=FALSE)
# print("hola")
# print(all.indexes)
validate.set.size <- trunc( nrow(data)/(k) )
iterations <- 1:k
max.accuracy <- 0
best.gamma <- NULL
best.cost <- NULL
for(gamma in gammas){
for(cost in costs){
sum.accuracy <- 0
accuracy.avg <- 0
for(i in iterations) {
#######
hasta <- i * validate.set.size
desde <- hasta - validate.set.size
test.subset <- data[desde:hasta,]
train.subset <- data[-(desde:hasta),]
svm <- svm(formula=class~., data= train.subset)
predicted.by.svm <- predict(svm, test.subset)
source("annvssvn.R")
acc <- results(test.subset, predicted.by.svm)
sum.accuracy <- sum.accuracy + acc
########
}
accuracy.avg <- sum.accuracy / k
}
}
k <- 5
gammas <- c(0.000001,0.00001,0.0001,0.001,0.01,0.1)
costs <- c(1,10,50,100,400,1000)
best.model <- NULL
summary <- data.frame()
all.indexes <- sample(nrow(data), nrow(data), replace=FALSE)
# print("hola")
# print(all.indexes)
validate.set.size <- trunc( nrow(data)/(k) )
iterations <- 1:k
max.accuracy <- 0
best.gamma <- NULL
best.cost <- NULL
for(gamma in gammas){
for(cost in costs){
sum.accuracy <- 0
accuracy.avg <- 0
for(i in iterations) {
#######
hasta <- i * validate.set.size
desde <- hasta - validate.set.size
test.subset <- data[desde:hasta,]
train.subset <- data[-(desde:hasta),]
svm <- svm(formula=class~., data= train.subset)
predicted.by.svm <- predict(svm, test.subset)
source("annvssvn.R")
acc <- results(test.subset, predicted.by.svm)
sum.accuracy <- sum.accuracy + acc
########
}
accuracy.avg <- sum.accuracy / k
}
}
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R', encoding = 'UTF-8')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R', encoding = 'UTF-8')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R', encoding = 'UTF-8')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R', encoding = 'UTF-8')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R', encoding = 'UTF-8')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R', encoding = 'UTF-8')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R', encoding = 'UTF-8')
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/annvssvm.R', encoding = 'UTF-8')
run.annvssvm()
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R')
run.kfold.experiment()
setwd("D:/Facultad/Aprendizaje de Maquinas/AM-L2/src")
source('D:/Facultad/Aprendizaje de Maquinas/AM-L2/src/svm.R', encoding = 'UTF-8')
run.kfold.experiment()
